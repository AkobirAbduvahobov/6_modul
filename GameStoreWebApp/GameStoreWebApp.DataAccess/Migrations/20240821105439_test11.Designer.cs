// <auto-generated />
using System;
using GameStoreWebApp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStoreWebApp.DataAccess.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20240821105439_test11")]
    partial class test11
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("GameId", "ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("97932e8d-ca8a-4631-a97b-071f87b372a3"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("897d7e9b-3ab6-4aa4-a81f-7cdd4ca6bf2e"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("d26b099a-cf1a-4b9c-9ff6-71a8ad37ac28"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("4dbc5b5b-ed3d-47e1-b0e5-d148f3478f65"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("65ba7d87-ac61-4aab-923d-38a18ceab800"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("4092ec42-fce4-4f7a-945b-e3e39def26f2"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("6a939fdb-9aab-43a2-b76c-d520f6a86f55"),
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("f45379dc-407f-4c4e-960a-10c9433a6539"),
                            Name = "RTS",
                            ParentGenreId = new Guid("97932e8d-ca8a-4631-a97b-071f87b372a3")
                        },
                        new
                        {
                            Id = new Guid("b671f49b-0f53-47cf-a969-4578bce7ed23"),
                            Name = "TBS",
                            ParentGenreId = new Guid("97932e8d-ca8a-4631-a97b-071f87b372a3")
                        },
                        new
                        {
                            Id = new Guid("7045a1c9-7342-4837-867c-2cdf07fb2e67"),
                            Name = "Rally",
                            ParentGenreId = new Guid("4dbc5b5b-ed3d-47e1-b0e5-d148f3478f65")
                        },
                        new
                        {
                            Id = new Guid("24100014-1340-447a-ab8b-23299c346d05"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("4dbc5b5b-ed3d-47e1-b0e5-d148f3478f65")
                        },
                        new
                        {
                            Id = new Guid("d49af098-40ee-4752-a39d-fb70d2bea027"),
                            Name = "Formula",
                            ParentGenreId = new Guid("4dbc5b5b-ed3d-47e1-b0e5-d148f3478f65")
                        },
                        new
                        {
                            Id = new Guid("b7614617-40b0-41a1-a55d-e521dd606fb0"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("4dbc5b5b-ed3d-47e1-b0e5-d148f3478f65")
                        },
                        new
                        {
                            Id = new Guid("6240345c-d251-43b4-9907-ce320966dd5c"),
                            Name = "FPS",
                            ParentGenreId = new Guid("65ba7d87-ac61-4aab-923d-38a18ceab800")
                        },
                        new
                        {
                            Id = new Guid("280b09d7-ab75-4e95-aaa8-bef7793a662d"),
                            Name = "TPS",
                            ParentGenreId = new Guid("65ba7d87-ac61-4aab-923d-38a18ceab800")
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.OrderGame", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderGames");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa1fa045-6002-45ce-86e2-4dc6a7e6cf00"),
                            Description = "Cool way1",
                            ImageUrl = "Link1",
                            Title = "Bank"
                        },
                        new
                        {
                            Id = new Guid("ff5a096a-350e-4867-89c4-e558f493b96f"),
                            Description = "Cool way2",
                            ImageUrl = "Link2",
                            Title = "IBox terminal"
                        },
                        new
                        {
                            Id = new Guid("dcbe76be-4ea2-4ca0-b4cf-78e2b6f3c99d"),
                            Description = "Cool way3",
                            ImageUrl = "Link3",
                            Title = "Visa"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80b7312e-0eb5-46d8-9d62-04cae861e454"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("7b4a1fbe-5315-464a-9767-806b72a24cc8"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("909e6a32-8e4e-4d3a-bb6e-c12d494e3d9b"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("8fdbf226-58e6-42fa-9a2e-3f72542271e2"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Game");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.OrderGame", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Order", "Order")
                        .WithMany("OrderGames")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Order", b =>
                {
                    b.Navigation("OrderGames");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
