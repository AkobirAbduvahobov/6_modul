// <auto-generated />
using System;
using GameStoreWebApp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStoreWebApp.DataAccess.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20240821133357_test12")]
    partial class test12
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.BanDuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BanDurations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("958c9d98-2a9a-40a7-9792-b61b24084a6b"),
                            Duration = "1 hour"
                        },
                        new
                        {
                            Id = new Guid("31bac2e0-2ccd-42a3-852b-542061a9789a"),
                            Duration = "1 day"
                        },
                        new
                        {
                            Id = new Guid("960d0067-16b6-417d-91ef-2e746835a30c"),
                            Duration = "1 week"
                        },
                        new
                        {
                            Id = new Guid("5ca65b46-6e37-401a-95c6-ffd141d427e1"),
                            Duration = "1 month"
                        },
                        new
                        {
                            Id = new Guid("cc141eea-f0e9-40cb-9eca-7fa05c0dd458"),
                            Duration = "permanent"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("GameId", "ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a949b8b0-0411-4863-821f-3356a99f07b9"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("f258407b-2a40-4a2a-a5bd-1e2135ad5514"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("ff8aea40-b546-4f5d-a662-95971f95f736"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("2904aa60-8616-48f7-8711-8af2597c62c5"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("c0443750-7f7f-4ee7-9c7f-c37380381168"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("dbce3aaf-6466-4a7e-8969-9ab75e70a5e8"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("c996541a-7841-4aa2-851b-0b0e19bab8ec"),
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("d7d0d278-b9b6-41b9-a24b-0ef164eebf24"),
                            Name = "RTS",
                            ParentGenreId = new Guid("a949b8b0-0411-4863-821f-3356a99f07b9")
                        },
                        new
                        {
                            Id = new Guid("a169a2a5-de53-406a-ad9f-266e8a1662c0"),
                            Name = "TBS",
                            ParentGenreId = new Guid("a949b8b0-0411-4863-821f-3356a99f07b9")
                        },
                        new
                        {
                            Id = new Guid("4c7b938d-90f7-404c-a16b-b6d7751d2568"),
                            Name = "Rally",
                            ParentGenreId = new Guid("2904aa60-8616-48f7-8711-8af2597c62c5")
                        },
                        new
                        {
                            Id = new Guid("6e3b22bf-445e-41df-83b5-7bfe7b2e2281"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("2904aa60-8616-48f7-8711-8af2597c62c5")
                        },
                        new
                        {
                            Id = new Guid("724f1e29-5a82-4944-b942-fca4e15ddf0d"),
                            Name = "Formula",
                            ParentGenreId = new Guid("2904aa60-8616-48f7-8711-8af2597c62c5")
                        },
                        new
                        {
                            Id = new Guid("40ed9962-570d-4c60-b2bc-ed1d9f0f4026"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("2904aa60-8616-48f7-8711-8af2597c62c5")
                        },
                        new
                        {
                            Id = new Guid("5bb474b9-8ef6-4da6-813a-7222c7a99136"),
                            Name = "FPS",
                            ParentGenreId = new Guid("c0443750-7f7f-4ee7-9c7f-c37380381168")
                        },
                        new
                        {
                            Id = new Guid("b6496a8c-0daa-499c-994a-707c14c98864"),
                            Name = "TPS",
                            ParentGenreId = new Guid("c0443750-7f7f-4ee7-9c7f-c37380381168")
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.OrderGame", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderGames");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef8af8bb-210b-491a-b98f-008357615332"),
                            Description = "Cool way1",
                            ImageUrl = "Link1",
                            Title = "Bank"
                        },
                        new
                        {
                            Id = new Guid("258648d4-29ec-4cc4-8f7c-462fed0f7102"),
                            Description = "Cool way2",
                            ImageUrl = "Link2",
                            Title = "IBox terminal"
                        },
                        new
                        {
                            Id = new Guid("77e49b1d-fa31-4dc7-b0af-946e26e431f4"),
                            Description = "Cool way3",
                            ImageUrl = "Link3",
                            Title = "Visa"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47944f83-26ca-474f-92a6-16dfeb08de94"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("d3771f97-5340-4392-aa3b-c483830137cd"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("6c890d87-9901-4290-a48e-c8018e5e1df6"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("acda2a01-7a5b-411a-a555-f85e4ae0b885"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Game");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.OrderGame", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Order", "Order")
                        .WithMany("OrderGames")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Order", b =>
                {
                    b.Navigation("OrderGames");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
