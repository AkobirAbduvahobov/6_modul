// <auto-generated />
using System;
using GameStoreWebApp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStoreWebApp.DataAccess.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20240718115735_test3")]
    partial class test3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("194874ea-d110-40f5-9cfa-b23168f92dbd"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("d3428dcf-e9c2-4b9c-857b-fdba3e89cfd2"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("70d7a04a-0390-4b60-8a95-7397b93e52f6"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("a8771821-c9f3-4583-b5f2-7d6292b141e3"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("f9128ee9-9c14-403d-8bf8-786b200d07d4"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("f28c3bb1-5025-40f9-b34b-97a488079b15"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("35e5c411-a55e-4f94-ab3f-da4c7ab7cb86"),
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("addd020d-eb08-4444-a428-df258f87401b"),
                            Name = "RTS",
                            ParentGenreId = new Guid("194874ea-d110-40f5-9cfa-b23168f92dbd")
                        },
                        new
                        {
                            Id = new Guid("b98396b5-5b85-4a12-adf4-39f1a1c76c53"),
                            Name = "TBS",
                            ParentGenreId = new Guid("194874ea-d110-40f5-9cfa-b23168f92dbd")
                        },
                        new
                        {
                            Id = new Guid("55d14cd0-0715-42f4-bd31-1f966c895977"),
                            Name = "Rally",
                            ParentGenreId = new Guid("a8771821-c9f3-4583-b5f2-7d6292b141e3")
                        },
                        new
                        {
                            Id = new Guid("d49849e0-e1a4-42d2-b3b0-873e0e57fc05"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("a8771821-c9f3-4583-b5f2-7d6292b141e3")
                        },
                        new
                        {
                            Id = new Guid("028b2ccc-b090-419a-9a6d-d7dc7a42386b"),
                            Name = "Formula",
                            ParentGenreId = new Guid("a8771821-c9f3-4583-b5f2-7d6292b141e3")
                        },
                        new
                        {
                            Id = new Guid("a206650c-050c-4c05-9cea-b532d6fd9711"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("a8771821-c9f3-4583-b5f2-7d6292b141e3")
                        },
                        new
                        {
                            Id = new Guid("f7ca90df-31a6-48b9-8b98-19240910be6d"),
                            Name = "FPS",
                            ParentGenreId = new Guid("f9128ee9-9c14-403d-8bf8-786b200d07d4")
                        },
                        new
                        {
                            Id = new Guid("7ca3250d-3cb6-474a-bc06-c4907de47ec5"),
                            Name = "TPS",
                            ParentGenreId = new Guid("f9128ee9-9c14-403d-8bf8-786b200d07d4")
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8535026-d525-4d35-a357-026bda0a9d7f"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("354b96c0-5d9f-4dd0-810e-7b77ae13f11d"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("a390f4da-9aec-47a1-a22c-b562759180f4"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("557b5f02-b749-4406-ac7d-d93b67b10027"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
