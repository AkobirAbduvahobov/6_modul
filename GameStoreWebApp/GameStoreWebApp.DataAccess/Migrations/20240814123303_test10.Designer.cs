// <auto-generated />
using System;
using GameStoreWebApp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStoreWebApp.DataAccess.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20240814123303_test10")]
    partial class test10
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e2a05ff-8e37-4e7a-a332-52ab79a208dd"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("a9d97087-5f47-49b3-9a24-6f61bc1a50ff"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("8c3079df-c4fa-4b81-84ad-a01b10ba49c3"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("660f9f64-0049-41a6-918d-277ed174a1ba"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("51698e17-0533-47a8-b4cc-2a6b7e1052b4"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("4ff509e4-9403-4b6e-98e0-ab66de2e9424"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("71ef9928-eb05-42c1-a47a-7d04a2c79183"),
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("e3281204-39a3-40e1-b12e-bbf370da9486"),
                            Name = "RTS",
                            ParentGenreId = new Guid("1e2a05ff-8e37-4e7a-a332-52ab79a208dd")
                        },
                        new
                        {
                            Id = new Guid("cb448b38-b046-462f-bf63-62e33b88cf17"),
                            Name = "TBS",
                            ParentGenreId = new Guid("1e2a05ff-8e37-4e7a-a332-52ab79a208dd")
                        },
                        new
                        {
                            Id = new Guid("ff1556bc-4141-4165-a7c6-32ac252cc89d"),
                            Name = "Rally",
                            ParentGenreId = new Guid("660f9f64-0049-41a6-918d-277ed174a1ba")
                        },
                        new
                        {
                            Id = new Guid("315a361d-23e3-4494-b0c1-03d6ab4f70a7"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("660f9f64-0049-41a6-918d-277ed174a1ba")
                        },
                        new
                        {
                            Id = new Guid("040c32d0-6da6-4351-a695-31620980b798"),
                            Name = "Formula",
                            ParentGenreId = new Guid("660f9f64-0049-41a6-918d-277ed174a1ba")
                        },
                        new
                        {
                            Id = new Guid("15be0cc4-d4a7-4e55-901b-a78809387a67"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("660f9f64-0049-41a6-918d-277ed174a1ba")
                        },
                        new
                        {
                            Id = new Guid("29ff547c-45ea-4702-a183-fdec33d12de3"),
                            Name = "FPS",
                            ParentGenreId = new Guid("51698e17-0533-47a8-b4cc-2a6b7e1052b4")
                        },
                        new
                        {
                            Id = new Guid("f7816783-a56f-4d00-8482-4e5e23efc7bf"),
                            Name = "TPS",
                            ParentGenreId = new Guid("51698e17-0533-47a8-b4cc-2a6b7e1052b4")
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.OrderGame", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderGames");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.PaymentMethodDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca3b4a01-fbb8-44f3-bc48-a272986f7f16"),
                            Description = "Cool way1",
                            ImageUrl = "Link1",
                            Title = "Bank"
                        },
                        new
                        {
                            Id = new Guid("f33b77cd-717d-4636-ad74-9308f9466a4b"),
                            Description = "Cool way2",
                            ImageUrl = "Link2",
                            Title = "IBox terminal"
                        },
                        new
                        {
                            Id = new Guid("3627a97a-511b-4170-a787-3abe9e9d6b3d"),
                            Description = "Cool way3",
                            ImageUrl = "Link3",
                            Title = "Visa"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8d48a1e-21f9-480d-ba9a-f7771662dce5"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("262822af-83c2-4a65-86b5-771a7f5bbd77"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("25b3ccf9-1666-447f-97b1-bded62d66392"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("f2188a6b-2457-42c7-8034-0c1679d10387"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.OrderGame", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Order", "Order")
                        .WithMany("OrderGames")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Order", b =>
                {
                    b.Navigation("OrderGames");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
