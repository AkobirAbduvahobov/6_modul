// <auto-generated />
using System;
using GameStoreWebApp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStoreWebApp.DataAccess.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20240718135146_test5")]
    partial class test5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ef3b282-219f-4cbf-8a16-5a19422f974f"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("caeec65d-f86a-4aab-bc29-102ebccfb087"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("eaa8be15-1cc9-4144-b7d9-0c207c3eea60"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("1537355c-264d-4da2-a18b-5dd3d608d919"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("18056a0c-a28b-4b0f-b340-0597356fed6a"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("6b9b5ec0-c8da-4cba-b227-0456c4dda189"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("bddf5ef3-a0a9-4a4f-9da1-0a03441afab9"),
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("f735f5c5-3435-4444-984c-77b8033a8b12"),
                            Name = "RTS",
                            ParentGenreId = new Guid("3ef3b282-219f-4cbf-8a16-5a19422f974f")
                        },
                        new
                        {
                            Id = new Guid("0d502b12-6a6b-4c52-ab81-17b35006ba6b"),
                            Name = "TBS",
                            ParentGenreId = new Guid("3ef3b282-219f-4cbf-8a16-5a19422f974f")
                        },
                        new
                        {
                            Id = new Guid("f3463764-d0c5-4033-b6eb-6178713f0c2e"),
                            Name = "Rally",
                            ParentGenreId = new Guid("1537355c-264d-4da2-a18b-5dd3d608d919")
                        },
                        new
                        {
                            Id = new Guid("7d48b576-7d32-4b40-89a8-2c572798577c"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("1537355c-264d-4da2-a18b-5dd3d608d919")
                        },
                        new
                        {
                            Id = new Guid("92d6daf8-f045-4b78-8251-a6409a7e1820"),
                            Name = "Formula",
                            ParentGenreId = new Guid("1537355c-264d-4da2-a18b-5dd3d608d919")
                        },
                        new
                        {
                            Id = new Guid("6ca6a3eb-6e7c-446e-bc0f-57ee94d6a1df"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("1537355c-264d-4da2-a18b-5dd3d608d919")
                        },
                        new
                        {
                            Id = new Guid("d49ff861-8b31-4727-ab45-47732a059ddf"),
                            Name = "FPS",
                            ParentGenreId = new Guid("18056a0c-a28b-4b0f-b340-0597356fed6a")
                        },
                        new
                        {
                            Id = new Guid("d353dded-d382-460a-9132-762c732b5e03"),
                            Name = "TPS",
                            ParentGenreId = new Guid("18056a0c-a28b-4b0f-b340-0597356fed6a")
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f07f63be-52dd-4d25-a4d9-45b204e832f9"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("83c76ea8-b250-44df-b8b4-8f5f354a3317"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("a0f45f5d-93d2-42e6-9ec2-35a2d43bb57f"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("ab0e67d8-2983-4fe9-a6bb-97ef2e8da0df"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
