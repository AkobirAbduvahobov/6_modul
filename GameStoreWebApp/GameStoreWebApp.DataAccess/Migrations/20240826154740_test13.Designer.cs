// <auto-generated />
using System;
using GameStoreWebApp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStoreWebApp.DataAccess.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20240826154740_test13")]
    partial class test13
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Ban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BannedUntil")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.BanDuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BanDurations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1b4d9e0-1edd-46de-8b0d-92c6c0097ce8"),
                            Duration = "1 hour"
                        },
                        new
                        {
                            Id = new Guid("0d7a6320-5fa4-4c4e-a1a9-db76e15fe000"),
                            Duration = "1 day"
                        },
                        new
                        {
                            Id = new Guid("4e698dbf-7ce3-4366-82d9-06bb1e70269b"),
                            Duration = "1 week"
                        },
                        new
                        {
                            Id = new Guid("5ac36b91-9eba-45c9-a2a5-d5c4776ba720"),
                            Duration = "1 month"
                        },
                        new
                        {
                            Id = new Guid("a8916306-f606-4458-8e08-fa49f2950866"),
                            Duration = "permanent"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("GameId", "ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40b768e9-c5e8-45f4-88dd-ae9c144856b5"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("ec4fb215-2350-447b-8717-29c9bb68783c"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("8181e20b-2b88-4777-914e-1ba0202b5b47"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("2945d873-065f-44b3-91d0-9495882ca934"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("71948dfc-b5aa-4ad4-b055-c2efa4602490"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("4a803de1-096f-40c5-aaf2-6cf6706e8149"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("2451f6df-cae1-4ed8-967c-a34cb0c65955"),
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("3fc509f6-7ff0-4b1d-84ac-2bc95b6e8e24"),
                            Name = "RTS",
                            ParentGenreId = new Guid("40b768e9-c5e8-45f4-88dd-ae9c144856b5")
                        },
                        new
                        {
                            Id = new Guid("925a9f8a-978c-4646-a6e5-eb7a7ebee96d"),
                            Name = "TBS",
                            ParentGenreId = new Guid("40b768e9-c5e8-45f4-88dd-ae9c144856b5")
                        },
                        new
                        {
                            Id = new Guid("228fa0e4-fd1e-4bb4-92b1-088339b8b2db"),
                            Name = "Rally",
                            ParentGenreId = new Guid("2945d873-065f-44b3-91d0-9495882ca934")
                        },
                        new
                        {
                            Id = new Guid("a6c7dd37-93c4-485c-b7b1-807f847030ab"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("2945d873-065f-44b3-91d0-9495882ca934")
                        },
                        new
                        {
                            Id = new Guid("c2e1a182-7c39-4174-bca6-53a0da9af267"),
                            Name = "Formula",
                            ParentGenreId = new Guid("2945d873-065f-44b3-91d0-9495882ca934")
                        },
                        new
                        {
                            Id = new Guid("334bafa5-7abc-47c7-bdd0-183589b9d960"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("2945d873-065f-44b3-91d0-9495882ca934")
                        },
                        new
                        {
                            Id = new Guid("9363daaa-40e3-4cb5-b314-6caf11f1c2e4"),
                            Name = "FPS",
                            ParentGenreId = new Guid("71948dfc-b5aa-4ad4-b055-c2efa4602490")
                        },
                        new
                        {
                            Id = new Guid("0d523d3f-f4fe-4b2b-9602-70425dafb7ee"),
                            Name = "TPS",
                            ParentGenreId = new Guid("71948dfc-b5aa-4ad4-b055-c2efa4602490")
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.OrderGame", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderGames");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ac7a0d2-8d84-4545-a686-a4f669d5759e"),
                            Description = "Cool way1",
                            ImageUrl = "Link1",
                            Title = "Bank"
                        },
                        new
                        {
                            Id = new Guid("5adf16a1-2f24-4387-badf-fdabbf63a080"),
                            Description = "Cool way2",
                            ImageUrl = "Link2",
                            Title = "IBox terminal"
                        },
                        new
                        {
                            Id = new Guid("b05fd152-50fa-4e07-b658-b953342fd145"),
                            Description = "Cool way3",
                            ImageUrl = "Link3",
                            Title = "Visa"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ebf0f2d-def5-4a12-b7a9-452dd72755d8"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("63386839-b735-4d9a-85fa-f992720fbc41"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("846eb90b-ee6e-4929-8a84-7391a9ff40a1"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("9fce1834-c98e-4a07-8554-fb0a1367f7f2"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Game");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.OrderGame", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Order", "Order")
                        .WithMany("OrderGames")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Order", b =>
                {
                    b.Navigation("OrderGames");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
