// <auto-generated />
using System;
using GameStoreWebApp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStoreWebApp.DataAccess.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Ban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BannedUntil")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.BanDuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BanDurations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c52c874b-38d2-4596-854a-b898aa35987d"),
                            Duration = "1 hour"
                        },
                        new
                        {
                            Id = new Guid("be9516ac-ff56-4876-9b8c-daee1a3b490f"),
                            Duration = "1 day"
                        },
                        new
                        {
                            Id = new Guid("b57b0bc6-4875-4b3c-aa04-caa2e89af4d3"),
                            Duration = "1 week"
                        },
                        new
                        {
                            Id = new Guid("0ea8a8ad-5f2b-414a-8e55-a52f5d8e0c43"),
                            Duration = "1 month"
                        },
                        new
                        {
                            Id = new Guid("ae965c21-fd05-4a25-883c-8062d9afe979"),
                            Duration = "permanent"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("GameId", "ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00566141-7011-40af-82f0-87007ee80308"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("2cd26fd1-3b71-47c6-98f6-f869f3612828"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("f488d7fc-ad94-472c-8120-f09958e31db7"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("d77a9795-cdd8-45d9-8623-e893dcc191d8"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("f54a9a34-6a52-447b-b505-c055d33886e8"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("3e9fa5da-64d3-4a7d-95d6-d388ca71c7ad"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("bcbe3e8b-1723-4a8e-8965-8193d4917a62"),
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("e7c9d157-b25c-4ec6-acdc-3b3de0b1294e"),
                            Name = "RTS",
                            ParentGenreId = new Guid("00566141-7011-40af-82f0-87007ee80308")
                        },
                        new
                        {
                            Id = new Guid("7d33e4a3-ba6b-4586-95f8-86e98f414034"),
                            Name = "TBS",
                            ParentGenreId = new Guid("00566141-7011-40af-82f0-87007ee80308")
                        },
                        new
                        {
                            Id = new Guid("0fb6dc1a-754c-4351-ab93-7e42bc9b46d2"),
                            Name = "Rally",
                            ParentGenreId = new Guid("d77a9795-cdd8-45d9-8623-e893dcc191d8")
                        },
                        new
                        {
                            Id = new Guid("a4a7ee69-d8ca-4998-b938-43f474984af3"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("d77a9795-cdd8-45d9-8623-e893dcc191d8")
                        },
                        new
                        {
                            Id = new Guid("f8715fd0-cc57-4054-8ec0-7b5c440ae6cb"),
                            Name = "Formula",
                            ParentGenreId = new Guid("d77a9795-cdd8-45d9-8623-e893dcc191d8")
                        },
                        new
                        {
                            Id = new Guid("4fb51243-4112-4970-9826-e838aa791b82"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("d77a9795-cdd8-45d9-8623-e893dcc191d8")
                        },
                        new
                        {
                            Id = new Guid("0807c7eb-af44-4a02-b1e1-ecd61596e9bc"),
                            Name = "FPS",
                            ParentGenreId = new Guid("f54a9a34-6a52-447b-b505-c055d33886e8")
                        },
                        new
                        {
                            Id = new Guid("412e0545-c69d-40b3-8baf-807c8920af3d"),
                            Name = "TPS",
                            ParentGenreId = new Guid("f54a9a34-6a52-447b-b505-c055d33886e8")
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.OrderGame", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderGames");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.PaginationOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaginationOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c0c2aff-8d6b-4b4e-9a12-167396ee49fb"),
                            Option = "10"
                        },
                        new
                        {
                            Id = new Guid("9f6d317c-67de-4d5e-830b-fa280f261d15"),
                            Option = "20"
                        },
                        new
                        {
                            Id = new Guid("62c9439d-91a3-47aa-b228-b4e2055992c2"),
                            Option = "50"
                        },
                        new
                        {
                            Id = new Guid("84337bc4-3d2f-4438-8559-d8f99716a284"),
                            Option = "100"
                        },
                        new
                        {
                            Id = new Guid("73ecf7e4-3fc3-4ca6-b872-b5c3d37b0755"),
                            Option = "all"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ce43b42-4525-48da-a98b-18623a9b7401"),
                            Description = "Cool way1",
                            ImageUrl = "Link1",
                            Title = "Bank"
                        },
                        new
                        {
                            Id = new Guid("1f572aa2-3ca4-41e7-9666-4eb8ec7d6dab"),
                            Description = "Cool way2",
                            ImageUrl = "Link2",
                            Title = "IBox terminal"
                        },
                        new
                        {
                            Id = new Guid("82c28574-792a-40b0-8edb-ac55d0df2fcd"),
                            Description = "Cool way3",
                            ImageUrl = "Link3",
                            Title = "Visa"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da88ada2-523e-489d-9d80-b1951f1e8d5e"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("c0f2a870-a487-4836-b0d4-51a3f93ed7bd"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("318e9eed-72e3-48df-91d4-dc6c270a2882"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("c77f716a-5cbd-43df-88e3-eaab1545a87d"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.PublishedDateFilterOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublishedDateFilterOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("123b81d8-b0e6-4f9f-8142-b39027b46adb"),
                            Option = "last week"
                        },
                        new
                        {
                            Id = new Guid("13632cb6-1d77-4d25-895c-a7d3d5088c36"),
                            Option = "last month"
                        },
                        new
                        {
                            Id = new Guid("50df5f2e-3f42-4c4a-a6f4-996dc844cf52"),
                            Option = "last year"
                        },
                        new
                        {
                            Id = new Guid("24bc1c22-b226-4254-b358-8e3944afad2e"),
                            Option = "2 years"
                        },
                        new
                        {
                            Id = new Guid("2ced9363-4f84-46d1-a487-0f9bb4206e51"),
                            Option = "3 years"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.SortingOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SortingOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb081dc6-79e5-47a5-8751-e6a0ff1d2d06"),
                            Option = "Most popular"
                        },
                        new
                        {
                            Id = new Guid("146beb80-7d4f-4897-8360-26bd20be3045"),
                            Option = "Most commented"
                        },
                        new
                        {
                            Id = new Guid("c4d469a0-7f00-499d-b9d5-420049304757"),
                            Option = "Price ASC"
                        },
                        new
                        {
                            Id = new Guid("b870725e-e375-4acb-ab3f-0cbc3f3995ed"),
                            Option = "Price DESC"
                        },
                        new
                        {
                            Id = new Guid("e4ccec3a-2418-4b15-9838-838e698bf253"),
                            Option = "New"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Game");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.OrderGame", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Order", "Order")
                        .WithMany("OrderGames")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Order", b =>
                {
                    b.Navigation("OrderGames");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
