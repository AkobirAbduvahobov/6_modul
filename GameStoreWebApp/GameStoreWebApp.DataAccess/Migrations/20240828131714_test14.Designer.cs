// <auto-generated />
using System;
using GameStoreWebApp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStoreWebApp.DataAccess.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20240828131714_test14")]
    partial class test14
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Ban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BannedUntil")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.BanDuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BanDurations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d185ed1-a416-421e-bebe-b291559294c3"),
                            Duration = "1 hour"
                        },
                        new
                        {
                            Id = new Guid("2087dea6-d2c5-4e34-ad02-7f2738fe14e7"),
                            Duration = "1 day"
                        },
                        new
                        {
                            Id = new Guid("692c9d90-8b90-4ee6-a1d9-dfd31ac7c459"),
                            Duration = "1 week"
                        },
                        new
                        {
                            Id = new Guid("a12d23cd-c1de-471e-9025-1d403dfabdd8"),
                            Duration = "1 month"
                        },
                        new
                        {
                            Id = new Guid("0d911c1c-69d2-47bd-964f-1895414353f7"),
                            Duration = "permanent"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("GameId", "ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fb43a10-f694-47a8-abaf-ae0ca2239d78"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("f416e840-1d4c-464e-9046-6430a0b757e4"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("e9f2d202-fd17-409a-adb7-2f27b34b1f80"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("5c2dc20b-ba2d-4b0c-9256-cb9d0315e8fb"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("c9b2b8b0-ecba-4109-9033-c03fbe9a2624"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("bc067760-34d8-454a-a2b2-353fcf0d7ef2"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("edd3de05-e9e2-411f-9be5-84e5226beb74"),
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("06367a69-86e8-48c9-8675-7c3d4bf16640"),
                            Name = "RTS",
                            ParentGenreId = new Guid("3fb43a10-f694-47a8-abaf-ae0ca2239d78")
                        },
                        new
                        {
                            Id = new Guid("17bd406a-9d91-4247-b31a-526f38ca43e2"),
                            Name = "TBS",
                            ParentGenreId = new Guid("3fb43a10-f694-47a8-abaf-ae0ca2239d78")
                        },
                        new
                        {
                            Id = new Guid("e3421f39-083a-46a1-a160-c46d2206a9d1"),
                            Name = "Rally",
                            ParentGenreId = new Guid("5c2dc20b-ba2d-4b0c-9256-cb9d0315e8fb")
                        },
                        new
                        {
                            Id = new Guid("a28c2aaf-c2ff-4664-be21-e5a3f379d48e"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("5c2dc20b-ba2d-4b0c-9256-cb9d0315e8fb")
                        },
                        new
                        {
                            Id = new Guid("61f2ed1e-3098-40c1-a8eb-616bd5507c12"),
                            Name = "Formula",
                            ParentGenreId = new Guid("5c2dc20b-ba2d-4b0c-9256-cb9d0315e8fb")
                        },
                        new
                        {
                            Id = new Guid("94ea49c5-9e00-4264-90dc-bfffbe0c5d52"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("5c2dc20b-ba2d-4b0c-9256-cb9d0315e8fb")
                        },
                        new
                        {
                            Id = new Guid("9ad5b05b-e670-4fc9-9e52-4f391f78235a"),
                            Name = "FPS",
                            ParentGenreId = new Guid("c9b2b8b0-ecba-4109-9033-c03fbe9a2624")
                        },
                        new
                        {
                            Id = new Guid("04db6af3-ddde-4aac-8b6e-6efa23b6c30d"),
                            Name = "TPS",
                            ParentGenreId = new Guid("c9b2b8b0-ecba-4109-9033-c03fbe9a2624")
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.OrderGame", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderGames");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.PaginationOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaginationOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("24d3f39e-4f0c-4218-9118-62a0e579f327"),
                            Option = "10"
                        },
                        new
                        {
                            Id = new Guid("cfbfce13-8728-4b06-870c-f9d299be7706"),
                            Option = "20"
                        },
                        new
                        {
                            Id = new Guid("2b2312f5-8a0f-4bc4-b90d-078bffa6baaf"),
                            Option = "50"
                        },
                        new
                        {
                            Id = new Guid("976fc3eb-749f-4a8b-ba90-a58bb19251cb"),
                            Option = "100"
                        },
                        new
                        {
                            Id = new Guid("1785f2ad-55be-41e1-8442-88c21c5c7e57"),
                            Option = "all"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0aa6ae90-184b-4691-894a-6f2d359023cc"),
                            Description = "Cool way1",
                            ImageUrl = "Link1",
                            Title = "Bank"
                        },
                        new
                        {
                            Id = new Guid("571bbde6-fcef-439f-9e17-b1cd87bf367c"),
                            Description = "Cool way2",
                            ImageUrl = "Link2",
                            Title = "IBox terminal"
                        },
                        new
                        {
                            Id = new Guid("4741f705-5abe-4c8e-96bd-2ee5fb1c2a32"),
                            Description = "Cool way3",
                            ImageUrl = "Link3",
                            Title = "Visa"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19b303cc-46fb-4daa-aa97-6f418e3484c5"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("a0a0bdce-7e4f-4993-b89e-d31e02bf3b7e"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("d4d251e1-0910-4cbf-9271-19795293e5fa"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("3ebd777c-af71-4568-acbf-069b39bb4234"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.PublishedDateFilterOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublishedDateFilterOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7895132a-11ab-4a74-8cd9-fc1e15a58c72"),
                            Option = "last week"
                        },
                        new
                        {
                            Id = new Guid("e9ce6302-9968-4f5a-923a-3319ed12448a"),
                            Option = "last month"
                        },
                        new
                        {
                            Id = new Guid("c23d475e-b140-471d-9f31-c4d94f53fb66"),
                            Option = "last year"
                        },
                        new
                        {
                            Id = new Guid("2ec573c2-f086-4d0f-9d73-3ec29a6bd9e6"),
                            Option = "2 years"
                        },
                        new
                        {
                            Id = new Guid("d826377c-f7e6-4e6d-ae0b-a2518452b640"),
                            Option = "3 years"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.SortingOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SortingOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bdecdf6-7074-4855-80c0-208f53313da9"),
                            Option = "Most popular"
                        },
                        new
                        {
                            Id = new Guid("44fafb8f-4390-41c7-9012-e3dd3c0706df"),
                            Option = "Most commented"
                        },
                        new
                        {
                            Id = new Guid("e11c2aab-86a7-47c0-a56d-51215af36f65"),
                            Option = "Price ASC"
                        },
                        new
                        {
                            Id = new Guid("cf46e534-cc08-4bc8-9dc5-e4b60ca74526"),
                            Option = "Price DESC"
                        },
                        new
                        {
                            Id = new Guid("a22b6a87-df39-4eb0-9aff-020186a02be5"),
                            Option = "New"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Game");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.OrderGame", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Order", "Order")
                        .WithMany("OrderGames")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Order", b =>
                {
                    b.Navigation("OrderGames");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
