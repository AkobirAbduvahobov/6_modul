// <auto-generated />
using System;
using GameStoreWebApp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStoreWebApp.DataAccess.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20240718120638_test4")]
    partial class test4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec7d8253-d018-4a62-932a-8cd3f2d84cea"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("3a6306a8-009e-4de6-9024-bd2930ba8d0d"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("59dc7cbe-24dc-49c0-b006-73522746bcee"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("08e541db-5309-4fa0-9eba-a0acaf490401"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("575cc9f9-7c97-42b0-9cbc-5afd5a0005ca"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("0cf6686c-dc8b-4ebf-abbd-72f848988f21"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("f26aab11-aa3a-40f4-8348-d24f795a0b66"),
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("b925b01b-4d60-4516-9e3e-34c65f6b6b11"),
                            Name = "RTS",
                            ParentGenreId = new Guid("ec7d8253-d018-4a62-932a-8cd3f2d84cea")
                        },
                        new
                        {
                            Id = new Guid("6488d748-6091-4eee-9cf4-fefd3c86b3a4"),
                            Name = "TBS",
                            ParentGenreId = new Guid("ec7d8253-d018-4a62-932a-8cd3f2d84cea")
                        },
                        new
                        {
                            Id = new Guid("07e92e87-b945-46a2-bbf3-1dac254e8ce5"),
                            Name = "Rally",
                            ParentGenreId = new Guid("08e541db-5309-4fa0-9eba-a0acaf490401")
                        },
                        new
                        {
                            Id = new Guid("d328a361-eb0e-4abf-8837-4ad36382ec0c"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("08e541db-5309-4fa0-9eba-a0acaf490401")
                        },
                        new
                        {
                            Id = new Guid("b068099f-9260-422c-860e-32f0ed136daf"),
                            Name = "Formula",
                            ParentGenreId = new Guid("08e541db-5309-4fa0-9eba-a0acaf490401")
                        },
                        new
                        {
                            Id = new Guid("a4404352-ec01-4037-bd1b-b536100e5107"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("08e541db-5309-4fa0-9eba-a0acaf490401")
                        },
                        new
                        {
                            Id = new Guid("84bec329-6b48-4eb9-a79a-9e7bdc0f1269"),
                            Name = "FPS",
                            ParentGenreId = new Guid("575cc9f9-7c97-42b0-9cbc-5afd5a0005ca")
                        },
                        new
                        {
                            Id = new Guid("7d8bdf9e-3723-4139-84a0-442260cc8b98"),
                            Name = "TPS",
                            ParentGenreId = new Guid("575cc9f9-7c97-42b0-9cbc-5afd5a0005ca")
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23a151aa-c310-4541-8546-a7e2157b0881"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("26f4ea19-33a3-4250-8ce2-d1343ad56535"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("4cf08d4f-14a9-4bfe-a0c0-e9c76890bae9"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("2fd39690-2a6a-490c-89d2-60e49bf9a59a"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("GameStoreWebApp.DataAccess.Entities.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Game", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStoreWebApp.DataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
